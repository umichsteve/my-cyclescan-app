<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CycleScan - Indoor Cycling Tracker</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            --royal-blue: #0052cc;
            --royal-blue-dark: #0041a3;
            --light-grey: #f8f9fa;
            --medium-grey: #e9ecef;
            --dark-grey: #6c757d;
            --black: #212529;
        }
        .loader {
            border-top-color: var(--royal-blue);
            -webkit-animation: spin 1s linear infinite;
            animation: spin 1s linear infinite;
        }
        @-webkit-keyframes spin {
            0% { -webkit-transform: rotate(0deg); }
            100% { -webkit-transform: rotate(360deg); }
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-light-grey text-black" style="background-color: var(--light-grey); color: var(--black);">

    <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <header class="text-center mb-10 flex justify-between items-center">
            <div></div>
            <div class="flex-grow">
                <h1 class="text-5xl font-bold" style="color: var(--royal-blue);">CycleScan</h1>
                <p class="mt-2" style="color: var(--dark-grey);">Your ride, recorded. Stop logging, start cycling.</p>
            </div>
            <button id="logout-button" class="hidden bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg transition duration-300 shadow-sm">Logout</button>
        </header>

        <!-- Auth Section -->
        <section id="auth-section" class="max-w-md mx-auto bg-white p-8 rounded-xl shadow-md">
            <h2 class="text-3xl font-bold text-center mb-6" style="color: var(--black);">Welcome</h2>
            <div class="mb-6 border-b" style="border-color: var(--medium-grey);">
                <nav class="flex -mb-px">
                    <button id="login-tab" class="w-1/2 py-4 px-1 text-center border-b-2 font-semibold text-lg" style="color: var(--royal-blue); border-color: var(--royal-blue);">Login</button>
                    <button id="signup-tab" class="w-1/2 py-4 px-1 text-center border-b-2 font-semibold text-lg border-transparent" style="color: var(--dark-grey);">Sign Up</button>
                </nav>
            </div>
            
            <form id="login-form">
                <div class="mb-4">
                    <label for="login-email" class="block mb-2 font-medium" style="color: var(--dark-grey);">Email</label>
                    <input type="email" id="login-email" class="w-full p-3 bg-white rounded-lg border focus:outline-none focus:ring-2" style="border-color: var(--medium-grey); focus-ring-color: var(--royal-blue);" required>
                </div>
                <div class="mb-6">
                    <label for="login-password" class="block mb-2 font-medium" style="color: var(--dark-grey);">Password</label>
                    <input type="password" id="login-password" class="w-full p-3 bg-white rounded-lg border focus:outline-none focus:ring-2" style="border-color: var(--medium-grey); focus-ring-color: var(--royal-blue);" required>
                </div>
                <button type="submit" class="w-full text-white font-bold py-3 rounded-lg transition duration-300 shadow-md" style="background-color: var(--royal-blue); hover:background-color: var(--royal-blue-dark);">Login</button>
            </form>

            <form id="signup-form" class="hidden">
                 <div class="mb-4">
                    <label for="signup-email" class="block mb-2 font-medium" style="color: var(--dark-grey);">Email</label>
                    <input type="email" id="signup-email" class="w-full p-3 bg-white rounded-lg border focus:outline-none focus:ring-2" style="border-color: var(--medium-grey); focus-ring-color: var(--royal-blue);" required>
                </div>
                <div class="mb-6">
                    <label for="signup-password" class="block mb-2 font-medium" style="color: var(--dark-grey);">Password</label>
                    <input type="password" id="signup-password" class="w-full p-3 bg-white rounded-lg border focus:outline-none focus:ring-2" style="border-color: var(--medium-grey); focus-ring-color: var(--royal-blue);" required>
                </div>
                <button type="submit" class="w-full bg-green-500 hover:bg-green-600 text-white font-bold py-3 rounded-lg transition duration-300 shadow-md">Create Account</button>
            </form>
            <p id="auth-error" class="text-red-500 text-center mt-4"></p>
        </section>

        <!-- Main Content (hidden by default) -->
        <main id="main-content" class="max-w-3xl mx-auto hidden">
            <section id="upload-section" class="bg-white p-8 rounded-xl shadow-md mb-8">
                <h2 class="text-3xl font-bold text-center mb-4">Upload New Workout</h2>
                <p class="text-center mb-6" style="color: var(--dark-grey);">Snap a photo of your workout summary to log it.</p>
                <div class="flex flex-col items-center">
                    <input type="file" id="image-upload" class="hidden" accept="image/*">
                    <label for="image-upload" class="text-white font-bold py-3 px-8 rounded-lg cursor-pointer transition duration-300 shadow-md w-full sm:w-auto text-center" style="background-color: var(--royal-blue); hover:background-color: var(--royal-blue-dark);">
                        Take or Upload Photo
                    </label>
                </div>
            </section>
            
            <section id="analysis-section" class="hidden bg-white p-8 rounded-xl shadow-md mb-8">
                <h2 class="text-3xl font-bold text-center mb-6">Analyzing Your Ride...</h2>
                <div class="my-4 flex justify-center">
                    <img id="image-preview" src="#" alt="Workout Summary Preview" class="max-w-full h-auto rounded-lg max-h-64 border" style="border-color: var(--medium-grey);"/>
                </div>
                <div id="loader" class="loader ease-linear rounded-full border-8 border-t-8 h-24 w-24 mx-auto hidden" style="border-color: var(--medium-grey);"></div>
                <p id="loading-text" class="text-center mt-4" style="color: var(--dark-grey);"></p>
            </section>

            <section id="results-section" class="hidden bg-white p-8 rounded-xl shadow-md mb-8">
                <h2 class="text-3xl font-bold text-center mb-6">Your Workout Results</h2>
                <div id="results-display" class="grid grid-cols-2 md:grid-cols-3 gap-4 text-center"></div>
                <div class="mt-8 flex flex-col sm:flex-row justify-center items-center gap-4">
                     <button id="save-button" class="w-full sm:w-auto bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-6 rounded-lg transition duration-300 shadow-md">Save Workout</button>
                     <button id="try-again-button" class="w-full sm:w-auto text-white font-bold py-3 px-6 rounded-lg transition duration-300 shadow-md" style="background-color: var(--dark-grey); hover:opacity: 0.9;">Try Again</button>
                </div>
            </section>

            <section id="history-section">
                <h2 class="text-3xl font-bold mb-6 text-center">Workout History</h2>
                <div id="history-list" class="space-y-4">
                     <p class="text-center" style="color: var(--dark-grey);">Loading workout history...</p>
                </div>
            </section>
        </main>
        
        <footer id="footer" class="text-center mt-12 py-6 border-t hidden" style="border-color: var(--medium-grey);">
             <h3 class="text-xl font-semibold mb-2" style="color: var(--royal-blue);">Help Us Improve!</h3>
             <p class="max-w-3xl mx-auto" style="color: var(--dark-grey);">By sharing your workout summaries, you help train our AI for a wider range of studio equipment.</p>
        </footer>
    </div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, addDoc, collection, query, onSnapshot, deleteDoc, serverTimestamp, setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // --- DOM Elements ---
        const authSection = document.getElementById('auth-section');
        const mainContent = document.getElementById('main-content');
        const footer = document.getElementById('footer');
        const loginTab = document.getElementById('login-tab');
        const signupTab = document.getElementById('signup-tab');
        const loginForm = document.getElementById('login-form');
        const signupForm = document.getElementById('signup-form');
        const authError = document.getElementById('auth-error');
        const logoutButton = document.getElementById('logout-button');

        const uploadSection = document.getElementById('upload-section');
        const analysisSection = document.getElementById('analysis-section');
        const resultsSection = document.getElementById('results-section');
        const imageUpload = document.getElementById('image-upload');
        const imagePreview = document.getElementById('image-preview');
        const loader = document.getElementById('loader');
        const loadingText = document.getElementById('loading-text');
        const resultsDisplay = document.getElementById('results-display');
        const saveButton = document.getElementById('save-button');
        const tryAgainButton = document.getElementById('try-again-button');
        const historyList = document.getElementById('history-list');

        // --- State ---
        let currentWorkoutData = null;
        let db, auth, userId, appId;
        let unsubscribeHistory = null;

        // --- Firebase Initialization ---
        function initializeFirebase() {
            try {
                const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
                appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

                if (!firebaseConfig.apiKey) {
                    authError.textContent = "Error: Application is not configured correctly.";
                    return;
                }
                
                const app = initializeApp(firebaseConfig);
                db = getFirestore(app);
                auth = getAuth(app);
                setLogLevel('debug');

                onAuthStateChanged(auth, (user) => {
                    if (user) {
                        userId = user.uid;
                        authSection.classList.add('hidden');
                        mainContent.classList.remove('hidden');
                        footer.classList.remove('hidden');
                        logoutButton.classList.remove('hidden');
                        setupHistoryListener();
                    } else {
                        userId = null;
                        if (unsubscribeHistory) unsubscribeHistory();
                        authSection.classList.remove('hidden');
                        mainContent.classList.add('hidden');
                        footer.classList.add('hidden');
                        logoutButton.classList.add('hidden');
                        historyList.innerHTML = `<p class="text-center" style="color: var(--dark-grey);">Please log in to see your history.</p>`;
                    }
                });
            } catch (error) {
                console.error("Firebase initialization failed:", error);
                authError.textContent = "Failed to initialize the application.";
            }
        }

        // --- Auth UI and Logic ---
        function switchTab(activeTab, inactiveTab, activeForm, inactiveForm) {
            activeTab.style.color = 'var(--royal-blue)';
            activeTab.style.borderColor = 'var(--royal-blue)';
            inactiveTab.style.color = 'var(--dark-grey)';
            inactiveTab.style.borderColor = 'transparent';
            activeForm.classList.remove('hidden');
            inactiveForm.classList.add('hidden');
            authError.textContent = '';
        }

        loginTab.addEventListener('click', () => switchTab(loginTab, signupTab, loginForm, signupForm));
        signupTab.addEventListener('click', () => switchTab(signupTab, loginTab, signupForm, loginForm));

        signupForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const email = document.getElementById('signup-email').value;
            const password = document.getElementById('signup-password').value;
            authError.textContent = '';
            try { await createUserWithEmailAndPassword(auth, email, password); } 
            catch (error) { authError.textContent = error.message; }
        });

        loginForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const email = document.getElementById('login-email').value;
            const password = document.getElementById('login-password').value;
            authError.textContent = '';
            try { await signInWithEmailAndPassword(auth, email, password); }
            catch (error) { authError.textContent = error.message; }
        });

        logoutButton.addEventListener('click', async () => {
            try { await signOut(auth); } catch (error) { console.error("Logout error:", error); }
        });

        // --- Firestore Listener ---
        function setupHistoryListener() {
            if (!userId || !db) return;
            const workoutsCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/workouts`);
            const q = query(workoutsCollectionRef);

            unsubscribeHistory = onSnapshot(q, (querySnapshot) => {
                const workouts = [];
                querySnapshot.forEach((doc) => workouts.push({ id: doc.id, ...doc.data() }));
                workouts.sort((a, b) => (b.createdAt?.toMillis() || 0) - (a.createdAt?.toMillis() || 0));
                renderHistory(workouts);
            }, (error) => {
                console.error("Error listening to history:", error);
                historyList.innerHTML = `<p class="text-center text-red-500">Failed to load workout history.</p>`;
            });
        }

        // --- Event Listeners (Main App) ---
        imageUpload.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    imagePreview.src = e.target.result;
                    uploadSection.classList.add('hidden');
                    analysisSection.classList.remove('hidden');
                    resultsSection.classList.add('hidden');
                    analyzeImage(e.target.result);
                };
                reader.readAsDataURL(file);
            }
        });
        
        saveButton.addEventListener('click', async () => {
            if (currentWorkoutData && userId && db) {
                 try {
                    const workoutsCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/workouts`);
                    await addDoc(workoutsCollectionRef, { ...currentWorkoutData, createdAt: serverTimestamp() });
                    resetToUpload();
                } catch (error) { console.error("Error saving workout:", error); }
            }
        });

        tryAgainButton.addEventListener('click', resetToUpload);

        // --- Core Functions ---
        async function analyzeImage(base64ImageData) {
            loader.classList.remove('hidden');
            loadingText.textContent = "Extracting workout data...";
            const base64Data = base64ImageData.split(',')[1];
            const prompt = `Analyze the image of an indoor cycling console. Extract metrics like Power, Cadence, Speed, KCAL, Time, and Distance. If a metric is missing, use "N/A". Return a simple key-value JSON object.`;
            const payload = {
                contents: [{ role: "user", parts: [{ text: prompt }, { inlineData: { mimeType: "image/jpeg", data: base64Data } }] }],
                generationConfig: { responseMimeType: "application/json" }
            };
            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

            try {
                const response = await fetch(apiUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
                if (!response.ok) throw new Error(`API call failed: ${response.statusText}`);
                const result = await response.json();
                if (result.candidates && result.candidates[0].content.parts[0]) {
                    currentWorkoutData = JSON.parse(result.candidates[0].content.parts[0].text);
                    displayResults(currentWorkoutData);
                } else { throw new Error("Could not parse workout data from image."); }
            } catch (error) {
                loadingText.textContent = `Error: ${error.message}. Please try again.`;
                setTimeout(resetToUpload, 4000);
            } finally {
                loader.classList.add('hidden');
            }
        }
        
        function displayResults(data) {
            analysisSection.classList.add('hidden');
            resultsSection.classList.remove('hidden');
            resultsDisplay.innerHTML = '';
            for (const key in data) {
                resultsDisplay.innerHTML += `
                    <div class="bg-light-grey p-4 rounded-lg" style="background-color: var(--light-grey);">
                        <p class="text-sm font-medium" style="color: var(--dark-grey);">${key}</p>
                        <p class="text-2xl font-bold" style="color: var(--royal-blue);">${data[key]}</p>
                    </div>`;
            }
        }
        
        function resetToUpload() {
            uploadSection.classList.remove('hidden');
            analysisSection.classList.add('hidden');
            resultsSection.classList.add('hidden');
            imageUpload.value = '';
            imagePreview.src = '#';
            currentWorkoutData = null;
        }
        
        function renderHistory(workouts) {
            if (workouts.length === 0) {
                historyList.innerHTML = `<div class="text-center bg-white p-6 rounded-xl shadow-md"><p style="color: var(--dark-grey);">No workouts saved yet. Time to ride!</p></div>`;
                return;
            }

            historyList.innerHTML = '';
            workouts.forEach(entry => {
                const historyItem = document.createElement('div');
                historyItem.className = 'bg-white p-5 rounded-xl shadow-md';
                const date = entry.createdAt ? entry.createdAt.toDate().toLocaleDateString() : 'N/A';
                let statsHtml = '<div class="grid grid-cols-2 sm:grid-cols-3 gap-4 mt-4">';
                const displayData = { ...entry };
                delete displayData.createdAt;
                delete displayData.id;

                for(const key in displayData){
                    statsHtml += `<div><p class="text-sm font-medium" style="color: var(--dark-grey);">${key}</p><p class="text-lg font-semibold" style="color: var(--black);">${displayData[key]}</p></div>`;
                }
                statsHtml += '</div>';

                historyItem.innerHTML = `<div class="flex justify-between items-center"><p class="font-bold text-xl">${date}</p><button class="delete-history-btn text-red-500 hover:text-red-700 font-semibold" data-id="${entry.id}">Delete</button></div>${statsHtml}`;
                historyList.appendChild(historyItem);
            });
            
            document.querySelectorAll('.delete-history-btn').forEach(button => {
                button.addEventListener('click', async (e) => {
                    const docId = e.target.getAttribute('data-id');
                    if (docId && userId && db) {
                        try {
                           const docRef = doc(db, `artifacts/${appId}/users/${userId}/workouts`, docId);
                           await deleteDoc(docRef);
                        } catch (error) { console.error("Error deleting document:", error); }
                    }
                });
            });
        }
        
        // --- App Start ---
        initializeFirebase();
    </script>
</body>
</html>
